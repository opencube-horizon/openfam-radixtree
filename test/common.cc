/*
 *  (c) Copyright 2024 Hewlett Packard Enterprise Development Company LP.
 *
 *  This software is available to you under a choice of one of two
 *  licenses. You may choose to be licensed under the terms of the
 *  GNU Lesser General Public License Version 3, or (at your option)
 *  later with exceptions included below, or under the terms of the
 *  MIT license (Expat) available in COPYING file in the source tree.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#include <iostream>

#include <nvmm/memory_manager.h>
#include "common.h"

#include <sys/types.h>
#include <sys/wait.h>

#ifdef GCOV
#include <csignal>
#include <cstdlib>

// Reference: https://stackoverflow.com/a/74065331
// https://gcc.gnu.org/onlinedocs/gcc/Gcov-and-Optimization.html
#if __GNUC__ <= 11
#define __gcov_dump __gcov_flush
#endif

extern "C" void __gcov_dump(void);
[[noreturn]] void terminateHandler() {
    __gcov_dump();
    std::abort();
}

void signalHandler(int signum) {
    __gcov_dump();
    signal(signum, SIG_DFL);
    raise(signum);
    return;
}
#endif

void Environment::SetUp() {
#ifdef GCOV
    signal(SIGINT, signalHandler);
    std::set_terminate(&terminateHandler); // register a handler to also get
                                           // profiles on aborted tests
#endif
    // init boost::log
    if (to_console_ == true) {
        nvmm::init_log(level_, "");
    } else {
        nvmm::init_log(level_, "mm.log");
    }

    nvmm::ResetNVMM();
    nvmm::StartNVMM();
}

// based on code from
// https://github.com/google/googletest/issues/1153#issuecomment-428247477
int wait_for_child_fork(int pid) {
    int status;
    if (0 > waitpid(pid, &status, 0)) {
        std::cerr << "[----------]  Waitpid error!" << std::endl;
        return -1;
    }
    if (WIFEXITED(status)) {
        const int exit_status = WEXITSTATUS(status);
        if (exit_status != 0)
            std::cerr << "[----------]  Non-zero exit status " << exit_status
                      << " from test!" << std::endl;
        return exit_status;
    } else {
        std::cerr << "[----------]  Abnormal exit from child!" << std::endl;
        return -2;
    }
}
